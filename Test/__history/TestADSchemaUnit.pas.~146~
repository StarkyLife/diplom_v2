unit TestADSchemaUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, ADSchemaHelpUnit, Classes, Windows, ADSchemaTypes, LDAPClientUnit, 
  SysUtils, ADSchemaUnit;
type
  // Test methods for class ADSchema
  
  TestADSchema = class(TTestCase)
  strict private
    FADSchema: ADSchema;
    TestPassword: string;
    TestUserDN: string;
    TestPortNumber: Integer;
    TestHostName: string;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConnect;
    procedure TestDisconnect;
    procedure TestGetEntry;
    procedure TestGetEntry1;
    procedure TestGetAll;
    procedure TestGetAll1;
    procedure TestGetEntries;
    procedure TestAddEntry;
    procedure TestModifyEntryAttributes;
    procedure TestDeleteEntryAttributes;
    procedure TestDeleteEntryAttributes1;
    procedure TestActivateEntry;
    procedure TestDeactivateEntry;
  end;

implementation

procedure TestADSchema.SetUp;
begin
  FADSchema := ADSchema.Create;
  TestPortNumber := 389;
  TestHostName := 'Ilshat-2008.mydomain.com';
  TestPassword := 'pa$$w0rd';
  //userDN := 'CN=Ilshat,CN=Users,DC=domain,DC=local';
  TestUserDN := 'starky@mydomain.com';
end;

procedure TestADSchema.TearDown;
begin
  FADSchema.Free;
  FADSchema := nil;
end;

procedure TestADSchema.TestConnect;
var
  status: ADSchemaStatus;
  portNumber: Integer;
  password: string;
  userName: string;
  hostName: string;
begin
  // Setup method call parameters

  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  FADSchema.Disconnect;
  // Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestDisconnect;
begin
  FADSchema.Disconnect;
  // TODO: Validate method results
  CheckEquals(false, FADSchema.isActive, 'Error when trying to disconnect!');
end;

procedure TestADSchema.TestGetEntry;
var
  ReturnValue: ADEntry;
  status: ADSchemaStatus;
  entrType: EntryType;
  CNname: string;
  test : string;
begin
  CNname := 'user';
  entrType := ClassEntry;

  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.GetEntry(CNname, entrType, status);
  FADSchema.Disconnect;
  test := ReturnValue.Name;
  // DONE: Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestGetEntry1;
var
  ReturnValue: ADEntry;
  status: ADSchemaStatus;
  withAttr: array of string;
  entrType: EntryType;
  CNname: string;
begin
  CNname := 'user';
  entrType := ClassEntry;
  SetLength(withAttr, 1);
  withAttr[0] := 'mustContain';

  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.GetEntry(CNname, entrType, withAttr, status);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestGetAll;
var
  ReturnValue: ADEntryList;
  status: ADSchemaStatus;
  entrType: EntryType;
begin
  entrType := ClassEntry;

  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.GetAll(entrType, status);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestGetAll1;
var
  ReturnValue: ADEntryList;
  status: ADSchemaStatus;
  withAttr: array of string;
  entrType: EntryType;
begin
  entrType := ClassEntry;
  SetLength(withAttr, 1);
  withAttr[0] := 'cn';

  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.GetAll(entrType, withAttr, status);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestGetEntries;
var
  ReturnValue: ADEntryList;
  status: ADSchemaStatus;
  withAttr: array of string;
  filter: string;
begin
  SetLength(withAttr, 1);
  withAttr[0] := 'cn';
  filter := '(objectClass=classSchema)';
  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.GetEntries(filter, withAttr, status);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, status.StatusNumb, status.StatusMsg);
end;

procedure TestADSchema.TestAddEntry;
var
  ReturnValueAttribute, ReturnValueClass: ADSchemaStatus;
  newEntryAttribute, newEntryClass: ADEntry;
  status: ADSchemaStatus;
begin
  { Attribute ADD }
  {newEntryAttribute := ADEntry.Create('MyTestAttributeDemo');
  newEntryAttribute.AddAttribute('cn', ['MyTestAttributeDemo']);
  newEntryAttribute.AddAttribute('objectClass', ['attributeSchema']);
  newEntryAttribute.AddAttribute('attributeID', ['1.2.840.113556.1.8000.2554.13844.27783.13802.18569.40486.16667616.15992139']);
  newEntryAttribute.AddAttribute('attributeSyntax', ['2.5.5.12']);
  newEntryAttribute.AddAttribute('oMSyntax', ['64']);}

  //newEntry.AddAttribute('isSingleValued', ['TRUE']);

  { Class ADD }
  newEntryClass := ADEntry.Create('MyTest');
  newEntryClass.AddAttribute('cn', ['MyTest']);
  newEntryClass.AddAttribute('objectClass', ['classSchema']);
  newEntryClass.AddAttribute('governsID', ['1.2.840.113556.1.8000.2554.13844.27782.13802.18569.40486.16667616.15992144']);
  //newEntryClass.AddAttribute('mustContain', ['MyTest3']);

  { You can add if u want }
  //newEntry.AddAttribute('subClassOf', ['top']);      
  //newEntry.AddAttribute('defaultObjectCategory', ['CN=MyTest,CN=Schema,CN=Configuration,DC=domain,DC=local']);
  //newEntry.AddAttribute('objectClassCategory', ['0']);
  //newEntry.addAttribute('instanceType', ['4']);
  //newEntry.AddAttribute('lDAPDisplayName', ['MyTest2']);
  //newEntry.AddAttribute('objectCategory', ['CN=Class-Schema,CN=Schema,CN=Configuration,DC=domain,DC=local']);
  //newEntry.AddAttribute('name', ['MyTest']) ;

  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  //ReturnValueAttribute := FADSchema.AddEntry(newEntryAttribute);
  ReturnValueClass := FADSchema.AddEntry(newEntryClass);
  FADSchema.Disconnect;
  // DONE: Validate method results
  //CheckEquals(0, ReturnValueAttribute.StatusNumb, ReturnValueAttribute.StatusMsg);
  CheckEquals(0, ReturnValueClass.StatusNumb, ReturnValueClass.StatusMsg);
end;

procedure TestADSchema.TestModifyEntryAttributes;
var
  ReturnValue: ADSchemaStatus;
  modifiedEntry: ADEntry;
  status: ADSchemaStatus;
begin
  modifiedEntry := ADEntry.Create('MyTest');
  //modifiedEntry.AddAttribute('objectClassCategory', ['1']); { not allowed to change }
  modifiedEntry.AddAttribute('isDefunct', ['FALSE']);
  //modifiedEntry.AddAttribute('adminDescription', ['hey hey hey']);
  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.ModifyEntryAttributes(modifiedEntry);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, ReturnValue.StatusNumb, ReturnValue.StatusMsg);
end;

procedure TestADSchema.TestDeleteEntryAttributes;
var
  ReturnValue: ADSchemaStatus;
  entryWithDeleteAttributes: ADEntry;
  status: ADSchemaStatus;
begin
  entryWithDeleteAttributes := ADEntry.Create('MyTestClass3');
  entryWithDeleteAttributes.AddAttribute('mayContain');
  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.DeleteEntryAttributes(entryWithDeleteAttributes);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, ReturnValue.StatusNumb, ReturnValue.StatusMsg);
end;

procedure TestADSchema.TestDeleteEntryAttributes1;
var
  ReturnValue: ADSchemaStatus;
  attrToDelete: array of string;
  name: string;
  status: ADSchemaStatus;
begin
  name := 'MyTestClass3';
  SetLength(attrToDelete, 1);
  attrToDelete[0] := 'adminDescription';
  // DONE: Setup method call parameters
  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.DeleteEntryAttributes(name, attrToDelete);
  FADSchema.Disconnect;
  // DONE: Validate method results
  CheckEquals(0, ReturnValue.StatusNumb, ReturnValue.StatusMsg);
end;

procedure TestADSchema.TestActivateEntry;
var
  ReturnValue, status: ADSchemaStatus;
  defunctEntryName : string;
begin
  defunctEntryName := 'MyTestClass';

  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.ActivateEntry(defunctEntryName);
  FADSchema.Disconnect;

  CheckEquals(0, ReturnValue.StatusNumb, ReturnValue.StatusMsg);

end;

procedure TestADSchema.TestDeactivateEntry;
var
  ReturnValue, status: ADSchemaStatus;
  activeEntryName : string;
begin
  activeEntryName := 'MyTestClass';

  FADSchema.Connect(TestHostName, TestUserDN, TestPassword, TestPortNumber, status);
  status.Free;
  status := nil;
  ReturnValue := FADSchema.DeactivateEntry(activeEntryName);
  FADSchema.Disconnect;

  CheckEquals(0, ReturnValue.StatusNumb, ReturnValue.StatusMsg);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestADSchema.Suite);
end.

