unit TestLDAPClientUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, SysUtils, Classes, jwawinldap, LDAPClientUnit;
type
  // Test methods for class LDAPClient
  
  TestLDAPClient = class(TTestCase)
  strict private
    FLDAPClient: LDAPClient;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInit;
    procedure TestConnectSimple;
    procedure TestDisconnect;
    procedure TestSearch;
    procedure TestAddEntry;
    procedure TestModifyEntry;
    procedure TestDeleteEntry;
    procedure TestCompareAttributeValue;
  end;

implementation

procedure TestLDAPClient.SetUp;
begin
  FLDAPClient := LDAPClient.Create;
end;

procedure TestLDAPClient.TearDown;
begin
  FLDAPClient.Free;
  FLDAPClient := nil;
end;

procedure TestLDAPClient.TestInit;
var
  ReturnValue: LDAPClientStatus;
  portNumber: Integer;
  hostName: string;
begin
  // TODO: Setup method call parameters
  portNumber := 389;
  hostName := 'starkyli-1sqlu0.domain.local';
  ReturnValue := FLDAPClient.Init(hostName, portNumber);

  // TODO: Validate method results
  CheckEquals(0, ReturnValue.numb, ReturnValue.msg);
end;

procedure TestLDAPClient.TestConnectSimple;
var
  ReturnValue: LDAPClientStatus;
  password: string;
  userDN: string;
  portNumber: Integer;
  hostName: string;
begin
  // TODO: Setup method call parameters
  portNumber := 389;
  hostName := 'starkyli-1sqlu0.domain.local';
  password := 'pa$$w0rd';
  //userDN := 'CN=Ilshat,CN=Users,DC=domain,DC=local';
  userDN := 'starkylife@domain.local';
  FLDAPClient.Init(hostName, portNumber);
  ReturnValue := FLDAPClient.ConnectSimple(userDN, password);
  FLDAPClient.Disconnect;
  // TODO: Validate method results
  CheckEquals(0, ReturnValue.numb, ReturnValue.msg);
end;

procedure TestLDAPClient.TestDisconnect;
begin
  FLDAPClient.Disconnect;
  // TODO: Validate method results   
end;

procedure TestLDAPClient.TestSearch;
var
  ReturnValue: LDAPClientStatus;
  searchResult: SearchDataType;
  attr: array of LDAPAttribute;
  filter: string;
  catalogDN: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLDAPClient.Search(catalogDN, filter, attr, searchResult);
  // TODO: Validate method results
end;

procedure TestLDAPClient.TestAddEntry;
var
  ReturnValue: LDAPClientStatus;
  attr: $3;
  entryDN: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLDAPClient.AddEntry(entryDN, attr);
  // TODO: Validate method results
end;

procedure TestLDAPClient.TestModifyEntry;
var
  ReturnValue: LDAPClientStatus;
  modifyType: Integer;
  attrToModify: $4;
  entryDN: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLDAPClient.ModifyEntry(entryDN, attrToModify, modifyType);
  // TODO: Validate method results
end;

procedure TestLDAPClient.TestDeleteEntry;
var
  ReturnValue: LDAPClientStatus;
  entryDN: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLDAPClient.DeleteEntry(entryDN);
  // TODO: Validate method results
end;

procedure TestLDAPClient.TestCompareAttributeValue;
var
  ReturnValue: LDAPClientStatus;
  attrValueToCompare: string;
  attrName: string;
  entryDN: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLDAPClient.CompareAttributeValue(entryDN, attrName, attrValueToCompare);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestLDAPClient.Suite);
end.

