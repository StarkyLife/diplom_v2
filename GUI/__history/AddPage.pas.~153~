unit AddPage;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, Buttons, ExtCtrls, ADSchemaUnit, ADSchemaTypes,
  ErrorPage;

type
  OptionClass = class
    comboBox : TComboBox;
    edit : TEdit;
    deleteBtn : TSpeedButton;

    public
      constructor Create(cbx: TComboBox; ed: TEdit; dbtn: TSpeedButton);
  end;

  TAddForm = class(TForm)
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    LabelName: TLabel;
    LabelType: TLabel;
    EditName: TEdit;
    ComboBoxType: TComboBox;
    GroupBox1: TGroupBox;
    OIDLabel: TLabel;
    SyntaxLabel: TLabel;
    oMSyntaxLabel: TLabel;
    OIDEdit: TEdit;
    SyntaxEdit: TEdit;
    oMSyntaxEdit: TEdit;
    FlowPanel1: TFlowPanel;
    AddOptionButton: TButton;
    SaveBtn: TBitBtn;
    procedure ComboBoxTypeChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure AddOptionButtonClick(Sender: TObject);
    procedure DeleteInAddMode(Sender: TObject);
    procedure DeleteInModifyMode(Sender: TObject);
    procedure DeleteClick(Sender: TObject);
    procedure SaveBtnClick(Sender: TObject);
  private
    { Private declarations }
    optionalAttributes : TList;
    availableAttributeList : array of string;
    

    procedure pvLoadData();
    procedure pvSetDataByType(isAttribute : boolean);
    procedure pvSetAvailableAttributes(isAttribute : boolean);

    procedure pvShowErrorDialog(errorNumb: integer; errorMsg: string);
  public
    { Public declarations }
    schema : ADSchema;
    
    isModify : boolean;
    entryName : string;
  end;

var
  AddForm: TAddForm;

implementation

{$R *.dfm}

//Error handling
procedure TAddForm.pvShowErrorDialog(errorNumb: integer; errorMsg: string);
var
  errorForm : TErrorForm;
begin
  errorForm := TErrorForm.Create(Application);
  errorForm.SetErrorInfo(errorNumb, errorMsg);
  try
    errorForm.ShowModal;
  finally
    errorForm.Free;
  end;
end;

procedure TAddForm.SaveBtnClick(Sender: TObject);
var
  status : ADSchemaStatus;
  newEntry : ADEntry;
  entryName : string;
  i : integer;
begin
  
  if not isModify then
  // ADDING
  begin   
    entryName := EditName.Text;
    newEntry := ADEntry.Create(entryName);
    
    if ComboBoxType.ItemIndex = 0 then
    begin
      newEntry.AddAttribute('objectClass', ['attributeSchema']);
      newEntry.AddAttribute('attributeID', [OIDEdit.Text]);  
      newEntry.AddAttribute('attributeSyntax', [SyntaxEdit.Text]);
      newEntry.AddAttribute('oMSyntax', [oMSyntaxEdit.Text]);    
    end
    else
    begin
      newEntry.AddAttribute('objectClass', ['classSchema']);
      newEntry.AddAttribute('governsID', [OIDEdit.Text]);
    end;

    for i := 0 to optionalAttributes.Count - 1 do
    begin
      //TODO: add optional attributes
      //if there are attributes with equal name then add them to value
    end;
    
    status := schema.AddEntry(newEntry);
    if status.StatusType <> SuccessStatus then
    begin
      pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
      status.Free;
      if newEntry <> nil then
        newEntry.Destroy;
      Exit;
    end;
    status.Free;
    if newEntry <> nil then
      newEntry.Destroy;
  end
  else
  //MODIFYING
  begin
  
  end;
  
  ModalResult := mrOk;
end;

procedure TAddForm.AddOptionButtonClick(Sender: TObject);
var
  combobx : TComboBox;
  editbx : TEdit;
  deletebx : TSpeedButton;
  i : integer;
begin
  combobx := TComboBox.Create(self);
  if length(availableAttributeList) > 0 then
  begin
    for i := 0 to Length(availableAttributeList) - 1 do
      combobx.Items.Add(availableAttributeList[i]);
    combobx.ItemIndex := 0;
  end;  
  combobx.Parent := FlowPanel1;         

  editbx := TEdit.Create(self);
  editbx.Parent := FlowPanel1;

  deletebx := TSpeedButton.Create(self);
  //set image
  deletebx.Glyph.LoadFromFile(GetCurrentDir + '/Icons/delete2322.bmp');     
  //set click event handler
  deletebx.OnClick := DeleteClick;   
  deletebx.Parent := FlowPanel1;

  optionalAttributes.Add(OptionClass.Create(combobx, editbx, deletebx));
end;

procedure TAddForm.ComboBoxTypeChange(Sender: TObject);
begin
  if ComboBoxType.ItemIndex = 1 then
  begin
    pvSetDataByType(false);
    pvSetAvailableAttributes(false);
  end
  else
  begin
    pvSetDataByType(true);
    pvSetAvailableAttributes(true);
  end;

end;

procedure TAddForm.DeleteClick(Sender: TObject);
begin
  if isModify then
    DeleteInModifyMode(Sender)
  else
    DeleteInAddMode(Sender);
end;

procedure TAddForm.DeleteInAddMode(Sender: TObject);
var
  i : integer;
  temp : OptionClass;
begin
  //remove from form  
  for i := 0 to optionalAttributes.Count - 1 do
  begin
    if OptionClass(optionalAttributes[i]).deleteBtn = Sender then
    begin
      temp := OptionClass(optionalAttributes[i]);
      temp.comboBox.Free;
      temp.edit.free;
      temp.deleteBtn.Free;
      temp.Free;
      optionalAttributes.Delete(i);       
      Break;
    end;    
  end;
end;

procedure TAddForm.DeleteInModifyMode(Sender: TObject);
var
  i : integer;
  temp : OptionClass;
  attrName, attrValue, entryName : string;
  status : ADSchemaStatus;
begin
  //remove from form  
  for i := 0 to optionalAttributes.Count - 1 do
  begin
    if OptionClass(optionalAttributes[i]).deleteBtn = Sender then
    begin
      temp := OptionClass(optionalAttributes[i]);
      attrName := temp.comboBox.Text;
      attrValue := temp.edit.Text;
      entryName := EditName.Text;

      //call api
      status := schema.DeleteEntryAttributes(entryName, [attrName]);
      if status.StatusType <> SuccessStatus then
      begin
        pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
        status.free;
        Break;
      end;
      status.free;
      
      temp.comboBox.Free;      
      temp.edit.free;
      temp.deleteBtn.Free;
      temp.Free;
      optionalAttributes.Delete(i);       
      Break;
    end;    
  end;    
  
end;

procedure TAddForm.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i : integer;
begin
  if optionalAttributes.Count > 0 then
    for i := 0 to optionalAttributes.Count - 1 do
      OptionClass(optionalAttributes[i]).Free;
  optionalAttributes.Free;
end;

procedure TAddForm.FormCreate(Sender: TObject);
begin
  optionalAttributes := TList.Create;
  if isModify then
  begin
    Caption := 'Modify';
    pvLoadData;
    EditName.Enabled := false;
    ComboBoxType.Enabled := false;
  end;
end;

procedure TAddForm.pvLoadData();
begin
  //TODO: Load modify Data entry
end;

procedure TAddForm.pvSetDataByType(isAttribute : boolean);
begin
  if isAttribute then
  begin
    OIDLabel.Caption := 'attributeID';
    SyntaxLabel.Visible := true;
    SyntaxEdit.Visible := true;
    oMSyntaxLabel.Visible := true;
    oMSyntaxEdit.Visible := true;
  end
  else
  begin
    OIDLabel.Caption := 'governsID';
    SyntaxLabel.Visible := false;
    SyntaxEdit.Visible := false;
    oMSyntaxLabel.Visible := false;
    oMSyntaxEdit.Visible := false;
  end;
end;

procedure TAddForm.pvSetAvailableAttributes(isAttribute : boolean);

begin
  //TODO: Load item list
  
  //Set to available attributes
end;

{ OptionClass }

constructor OptionClass.Create(cbx: TComboBox; ed: TEdit; dbtn: TSpeedButton);
begin
  comboBox := cbx;
  edit := ed;
  deleteBtn := dbtn;
end;

end.
