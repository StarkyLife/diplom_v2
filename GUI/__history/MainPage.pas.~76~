unit MainPage;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, ExtCtrls, Grids, ToolWin, ADSchemaUnit, ADSchemaTypes;

type
  TMainForm = class(TForm)
    GridPanel1: TGridPanel;
    TreeViewMain: TTreeView;
    StringGridMain: TStringGrid;
    ToolBar1: TToolBar;
    AddButton: TToolButton;
    ModifyButton: TToolButton;
    ToolButton3: TToolButton;
    ActivateButton: TToolButton;
    DeactivateButton: TToolButton;
    ToolButton6: TToolButton;
    RefreshButton: TToolButton;
    ToolButton8: TToolButton;
    ConnectButton: TToolButton;
    DisconnectButton: TToolButton;
    ToolButton11: TToolButton;
    ExitButton: TToolButton;
    procedure FormCreate(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure TreeViewMainChange(Sender: TObject; Node: TTreeNode);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
    ATTRIBUTE_NODE : TTreeNode;
    CLASS_NODE : TTreeNode;
    TREE_NODE : TTreeNode;

    TreeViewCurrentNode : TTreeNode;
    schema : ADSchema;

    procedure pvResizeGridColumns();
    procedure pvLoadItemsToTree();
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if schema <> nil then
    schema.Destroy;
end;

procedure TMainForm.FormCreate(Sender: TObject);
var
  status : ADSchemaStatus;
  firstNode : TTreeNode;
begin
  pvResizeGridColumns;
  
  firstNode := TreeViewMain.Items.GetFirstNode;
  ATTRIBUTE_NODE := TreeViewMain.Items.AddChild(firstNode);
  CLASS_NODE := TreeViewMain.Items.AddChild(firstNode);
  TREE_NODE := TreeViewMain.Items.AddChild(firstNode);

  //TODO: connection form
  schema := ADSchema.Create('starkyli-1sqlu0.domain.local',
                             'starkylife@domain.local',
                             'pa$$w0rd', 389, status);
  status.Free;
  status := nil;
  pvLoadItemsToTree;
end;

procedure TMainForm.FormResize(Sender: TObject);
begin
  pvResizeGridColumns;
end;

{ PRIVATE Resize function for stringGrid columns }
procedure TMainForm.pvResizeGridColumns();
begin
  StringGridMain.ColWidths[0] := trunc(StringGridMain.Width*0.29);
  StringGridMain.ColWidths[1] := trunc(StringGridMain.Width*0.7);
end;

procedure TMainForm.TreeViewMainChange(Sender: TObject; Node: TTreeNode);
begin
  { Controling wich node is selected in tree }
  TreeViewCurrentNode := Node;
end;

{ PRIVATE Load TreeView Items function }
procedure TMainForm.pvLoadItemsToTree();

var
  entries : ADEntryList;
  status : ADSchemaStatus;
  iEntry : integer;
  
begin
  entries := schema.GetAll(ClassEntry, status);
  if status.StatusType <> SuccessStatus then
  begin
    //here error handling
    Exit;
  end;
  status.Free;
  status := nil;   
  for iEntry := 0 to entries.EntriesCount - 1 do
  begin
    TreeViewMain.Items.AddChild(CLASS_NODE, entries.Items[iEntry].Name);
  end;
  entries.Destroy;

  entries := schema.GetAll(AttributeEntry, status);
  if status.StatusType <> SuccessStatus then
  begin
    //here error handling
    Exit;
  end;
  status.Free;
  status := nil;

  curNode := TreeViewMain.Items.GetNode(ATTRIBUTE_NODE_INDEX);
  for iEntry := 0 to entries.EntriesCount - 1 do
  begin
    TreeViewMain.Items.AddChild(curNode, entries.Items[iEntry].Name);
  end;
  entries.Destroy;

end;

end.
