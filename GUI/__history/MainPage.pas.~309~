unit MainPage;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, ExtCtrls, Grids, ToolWin, ADSchemaUnit, ADSchemaTypes,
  Menus, ImgList, ConnectPage, Errorpage;

type
  TMainForm = class(TForm)
    GridPanel1: TGridPanel;
    TreeViewMain: TTreeView;
    StringGridMain: TStringGrid;
    ToolBar1: TToolBar;
    AddButton: TToolButton;
    ModifyButton: TToolButton;
    ToolButton3: TToolButton;
    ActivateButton: TToolButton;
    DeactivateButton: TToolButton;
    ToolButton6: TToolButton;
    RefreshButton: TToolButton;
    ToolButton8: TToolButton;
    ConnectButton: TToolButton;
    DisconnectButton: TToolButton;
    ToolButton11: TToolButton;
    ExitButton: TToolButton;
    MainMenu1: TMainMenu;
    sss: TMenuItem;
    Start1: TMenuItem;
    Connect1: TMenuItem;
    Disconnect1: TMenuItem;
    Exit1: TMenuItem;
    Help1: TMenuItem;
    About1: TMenuItem;
    Add1: TMenuItem;
    Modify1: TMenuItem;
    Activate1: TMenuItem;
    Deactivate1: TMenuItem;
    Refresh1: TMenuItem;
    Howto1: TMenuItem;
    AttributeSyntaxes1: TMenuItem;
    ImageListTool: TImageList;
    procedure FormCreate(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure TreeViewMainChange(Sender: TObject; Node: TTreeNode);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure StringGridMainDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure Exit1Click(Sender: TObject);
    procedure Disconnect1Click(Sender: TObject);
    procedure Connect1Click(Sender: TObject);
  private
    { Private declarations }
    ATTRIBUTE_NODE : TTreeNode;
    CLASS_NODE : TTreeNode;
    TREE_NODE : TTreeNode;

    TreeViewCurrentNode : TTreeNode;
    schema : ADSchema;

    procedure pvResizeGridColumns();

    procedure pvConnect();
    procedure pvLoadItemsToTree();

    procedure pvSetClassesToTable();
    procedure pvSetAttributesToTable();
    procedure pvSetEntryInfoToTable(entryName: string);
    procedure pvSetChildClassesToTable(parentClassName : string);

    procedure pvChangeDisconnectButtonsState(state : boolean);
    procedure pvClearStringGridTable();

    //Error procedure
    procedure pvShowErrorDialog(errorNumb: integer; errorMsg: string);
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

procedure TMainForm.pvChangeDisconnectButtonsState(state : boolean);
begin
  Disconnect1.Enabled := state;
  DisconnectButton.Enabled := state;
end;

//Error handling
procedure TMainForm.pvShowErrorDialog(errorNumb: integer; errorMsg: string);
var
  errorForm : TErrorForm;
begin
  errorForm := TErrorForm.Create(Application);
  errorForm.SetErrorInfo(errorNumb, errorMsg);
  try
    errorForm.ShowModal;
  finally
    errorForm.Free;
  end;
end;

//Getting info from form
procedure TMainForm.pvConnect;
var
  conForm : TConnectForm;
  modalRes : integer;
begin
  conForm := TConnectForm.Create(Application);
  try
    modalRes := conform.ShowModal;
    if modalRes = mrOk then
    begin
      schema := conform.GetSchema;
      conForm.Close;

      //load Tree View
      pvLoadItemsToTree;

      pvChangeDisconnectButtonsState(true);

    end else
    if modalRes = mrCancel then
    begin
      conForm.Close;
    end;
  finally    
    conform.Free;
  end;
end;

procedure TMainForm.Connect1Click(Sender: TObject);
begin
  pvConnect;
end;

procedure TMainForm.Disconnect1Click(Sender: TObject);
begin
  if schema <> nil then
    schema.Disconnect;

  ATTRIBUTE_NODE.DeleteChildren;
  CLASS_NODE.DeleteChildren;
  TREE_NODE.DeleteChildren;

  pvChangeDisconnectButtonsState(false);

  //pvConnect;
end;

procedure TMainForm.Exit1Click(Sender: TObject);
begin
  MainForm.Close;
end;

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if schema <> nil then
    schema.Destroy;
end;

procedure TMainForm.FormCreate(Sender: TObject);
var
  //status : ADSchemaStatus;
  firstNode : TTreeNode;
begin
  Application.HintColor := clGrayText;
  Application.HintPause := 250;

  pvResizeGridColumns;
  
  firstNode := TreeViewMain.Items.GetFirstNode;
  ATTRIBUTE_NODE := TreeViewMain.Items.AddChild(firstNode, 'Attributes');
  CLASS_NODE := TreeViewMain.Items.AddChild(firstNode, 'Classes');
  TREE_NODE := TreeViewMain.Items.AddChild(firstNode, 'ClassTree');

  StringGridMain.Cells[0, 0] := 'Name';
  StringGridMain.Cells[1, 0] := 'Value';
end;

procedure TMainForm.FormResize(Sender: TObject);
begin
  pvResizeGridColumns;
end;

{ PRIVATE Resize function for stringGrid columns }
procedure TMainForm.pvResizeGridColumns();
begin
  StringGridMain.ColWidths[0] := trunc(StringGridMain.Width*0.29);
  if StringGridMain.ColCount = 2 then
  begin
    StringGridMain.ColWidths[1] := trunc(StringGridMain.Width*0.7);
  end;
  if StringGridMain.ColCount = 3 then
  begin
    StringGridMain.ColWidths[1] := trunc(StringGridMain.Width*0.4);
    StringGridMain.ColWidths[2] := trunc(StringGridMain.Width*0.3);
  end;
end;

procedure TMainForm.StringGridMainDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
var
  AGrid : TStringGrid;
begin
  AGrid := TStringGrid(Sender);

  if ARow = 0 then
  begin
    AGrid.Canvas.Brush.Color := clBtnFace;
    AGrid.Canvas.FillRect(Rect);
    AGrid.Canvas.TextOut(Rect.Left + 2, Rect.Top + 2, AGrid.Cells[ACol, ARow]);
  end;
end;

procedure TMainForm.TreeViewMainChange(Sender: TObject; Node: TTreeNode);
begin
  { Controling wich node is selected in tree }
  TreeViewCurrentNode := Node;

  //Change the table content
  if TreeViewCurrentNode = CLASS_NODE then
    pvSetClassesToTable;
  if TreeViewCurrentNode = ATTRIBUTE_NODE then
    pvSetAttributesToTable;
  if TreeViewCurrentNode = TREE_NODE then
    pvSetChildClassesToTable(TreeViewCurrentNode.Text);
end;

{ PRIVATE Load TreeView Items function }
procedure TMainForm.pvLoadItemsToTree();

var
  entries : ADEntryList;
  status : ADSchemaStatus;
  iEntry : integer;
  
begin
  //Get Attributes     
  entries := schema.GetAll(AttributeEntry, ['cn'], status);
  if status.StatusType <> SuccessStatus then
  begin
    pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
    status.Free;
    status := nil;
    if entries <> nil then
    begin
      entries.Destroy;
      entries := nil;
    end;
    Exit;
  end;
  status.Free;
  status := nil;
  
  for iEntry := 0 to entries.EntriesCount - 1 do
  begin
    TreeViewMain.Items.AddChild(ATTRIBUTE_NODE, entries.Items[iEntry].Name);
  end;
  entries.Destroy;
  entries := nil;

  //Get Classes
  entries := schema.GetAll(ClassEntry, ['cn'], status);
  if status.StatusType <> SuccessStatus then
  begin
    pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
    status.Free;
    status := nil;
    if entries <> nil then
    begin
      entries.Destroy;
      entries := nil;
    end;
    Exit;
  end;
  status.Free;
  status := nil;
  for iEntry := 0 to entries.EntriesCount - 1 do
  begin
    TreeViewMain.Items.AddChild(CLASS_NODE, entries.Items[iEntry].Name);
  end;
  entries.Destroy;
  entries := nil;

  //TODO: Form Class Tree

end;

procedure TMainForm.pvSetClassesToTable();
var
  entries : ADEntryList;
  status : ADSchemaStatus;
  iEntry, iGridRowCount : integer;
  curAttrValue : string;
  curAttr : ADAttribute;
begin
  //GET Classes

  entries := schema.GetAll(ClassEntry, ['isDefunct', '', 'objectClassCategory'], status);
  if status.StatusType <> SuccessStatus then
  begin
    pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
    status.Free;
    status := nil;
    if entries <> nil then
    begin
      entries.Destroy;
      entries := nil;
    end;
    Exit;
  end;
  status.Free;
  status := nil;

  //Fill The Table
  pvClearStringGridTable;
  StringGridMain.ColCount := 3;
  StringGridMain.Cells[0,0] := 'Class Name';
  StringGridMain.Cells[1,0] := 'Type';
  StringGridMain.Cells[2,0] := 'Status';
  pvResizeGridColumns;

  StringGridMain.RowCount := entries.EntriesCount + 1;
  iGridRowCount := 0;
  if entries.EntriesCount <> 0 then
  begin
    for iEntry := 0 to entries.EntriesCount - 1 do
    begin
      iGridRowCount := iGridRowCount + 1;
      StringGridMain.Cells[0, iGridRowCount] := entries.Items[iEntry].Name;

      if (entries.Items[iEntry].AttributesCount > 0) then
      begin
        curAttr := entries.Items[iEntry].GetAttributeByName('objectClassCategory');
        if curAttr <> nil then
        begin
          if curAttr.ValuesCount > 0 then
          begin
            curAttrValue := curAttr.Values[0];
            if curAttrValue = '0' then
              StringGridMain.Cells[1, iGridRowCount] := 'Type88'
            else if curAttrValue = '1' then
              StringGridMain.Cells[1, iGridRowCount] := 'Structural'
            else if curAttrValue = '2' then
              StringGridMain.Cells[1, iGridRowCount] := 'Abstract'
            else if curAttrValue = '3' then
              StringGridMain.Cells[1, iGridRowCount] := 'Auxiliary';
          end; {curAttr.ValuesCount > 0}
        end; {curAttr <> nil}
        
        curAttr := entries.Items[iEntry].GetAttributeByName('isDefunct');
        if curAttr <> nil then
        begin
          if curAttr.ValuesCount > 0 then
          begin
            if curAttr.Values[0] = 'FALSE' then
              StringGridMain.Cells[2, iGridRowCount] := 'Active'
            else
              StringGridMain.Cells[2, iGridRowCount] := 'Deactivated';
          end;
        end {curAttr <> nil}
        else StringGridMain.Cells[2, iGridRowCount] := 'Active';
      end;  {(entries.Items[iEntry].AttributesCount > 0)}
    end; {for iEntry := 0 to entries.EntriesCount - 1 do}
  end;  {entries.EntriesCount <> 0}
  if entries <> nil then
  begin
    entries.Destroy;
    entries := nil;
  end;
        
end;

procedure TMainForm.pvSetAttributesToTable();
var
  entries : ADEntryList;
  status : ADSchemaStatus;
  iEntry, iGridRowCount, i : integer;
  //curAttrValue : string;
  curAttr : ADAttribute;
begin
  //GET Attributes

  entries := schema.GetAll(AttributeEntry, ['isDefunct', 'attributeSyntax'], status);
  if status.StatusType <> SuccessStatus then
  begin
    pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
    status.Free;
    status := nil;
    if entries <> nil then
    begin
      entries.Destroy;
      entries := nil;
    end;
    Exit;
  end;
  status.Free;
  status := nil;

  //Fill The Table
  pvClearStringGridTable;

  StringGridMain.ColCount := 3;
  StringGridMain.Cells[0,0] := 'Attribute Name';
  StringGridMain.Cells[1,0] := 'Syntax';
  StringGridMain.Cells[2,0] := 'Status';
  pvResizeGridColumns;

  StringGridMain.RowCount := entries.EntriesCount + 1;
  iGridRowCount := 0;
  if entries.EntriesCount <> 0 then
  begin
    for iEntry := 0 to entries.EntriesCount - 1 do
    begin
      iGridRowCount := iGridRowCount + 1;
      StringGridMain.Cells[0, iGridRowCount] := entries.Items[iEntry].Name;

      if (entries.Items[iEntry].AttributesCount > 0) then
      begin
        curAttr := entries.Items[iEntry].GetAttributeByName('attributeSyntax');
        if curAttr <> nil then
        begin
          if curAttr.ValuesCount > 0 then
          begin
            StringGridMain.Cells[1, iGridRowCount] := curAttr.Values[0];
          end; {curAttr.ValuesCount > 0}
        end; {curAttr <> nil}
        
        curAttr := entries.Items[iEntry].GetAttributeByName('isDefunct');
        if curAttr <> nil then
        begin
          if curAttr.ValuesCount > 0 then
          begin
            if curAttr.Values[0] = 'FALSE' then
              StringGridMain.Cells[2, iGridRowCount] := 'Active'
            else
              StringGridMain.Cells[2, iGridRowCount] := 'Deactivated';
          end;
        end {curAttr <> nil}
        else StringGridMain.Cells[2, iGridRowCount] := 'Active';
      end;  {(entries.Items[iEntry].AttributesCount > 0)}
    end; {for iEntry := 0 to entries.EntriesCount - 1 do}
  end;  {entries.EntriesCount <> 0}
  if entries <> nil then
  begin
    entries.Destroy;
    entries := nil;
  end;
end;

procedure TMainForm.pvSetEntryInfoToTable(entryName : string);
var
  entrType : EntryType;
  entry : ADEntry;
  status : ADSchemaStatus;
  iGridRowCount, iAttribute, iValue : integer;
  attribute : ADAttribute;
begin
  // set entry info
  if TreeViewCurrentNode.Parent = ATTRIBUTE_NODE then
    entrType := AttributeEntry
  else if TreeViewCurrentNode.Parent = CLASS_NODE then
       entrType := ClassEntry
       else Exit;

  entry := schema.GetEntry(entryName, entrType, status);
  if status.StatusType <> SuccessStatus then
  begin
    pvShowErrorDialog(status.StatusNumb, status.StatusMsg);
    status.Free;
    status := nil;
    if entry <> nil then
    begin
      entry.Destroy;
      entry := nil;
    end;
    Exit;
  end;
  status.Free;
  status := nil;

  //Fill The Table
  pvClearStringGridTable;

  StringGridMain.ColCount := 2;
  StringGridMain.Cells[0,0] := 'Attribute Name';
  StringGridMain.Cells[1,0] := 'Attribute Value';
  pvResizeGridColumns;

  StringGridMain.RowCount := entry.AttributesCount + 1;
  iGridRowCount := 0;
  if entry.AttributesCount <> 0 then
  begin
    for iAttribute := 0 to entry.AttributesCount - 1 do
    begin
      attribute := entry.Attributes[iAttribute];


      if attribute.ValuesCount > 0 then
      begin
        for iValue := 0 to attribute.ValuesCount - 1 do
        begin
          iGridRowCount := iGridRowCount + 1;
          StringGridMain.Cells[0, iGridRowCount] := attribute.Name;
        end;
      end;

    end; {for iEntry := 0 to entries.EntriesCount - 1 do}
  end;  {entries.EntriesCount <> 0}
  if entry <> nil then
  begin
    entry.Destroy;
    entry := nil;
  end;

end;

procedure TMainForm.pvSetChildClassesToTable(parentClassName : string);
begin
  //TODO: set clild classes
  if parentClassName = TREE_NODE.Text then
  begin

  end;
  
end;

procedure TMainForm.pvClearStringGridTable();
var
  i : integer;
begin
  with StringGridMain do
  begin
    for i:=0 to RowCount-1 do
      Rows[i].Clear;
    StringGridMain.RowCount := 2;
  end;

end;

end.
