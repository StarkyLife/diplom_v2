{ This unit contains class for Active Directory Schema Manipulation.

  Author: Ismagilov Ilshat (student group 4410)
  Email: ilshat.ismagilov2014@gmail.com
  Organisation: KAI (kai.ru)

  Version: 2.0
}

unit ADSchemaUnit;

interface

uses Windows, Classes, SysUtils, ADSchemaTypes, ADSchemaHelpUnit, LDAPClientUnit;

type
  EntryType = (
    ClassEntry,
    AttributeEntry);

  { Public class for administrating the Active Directory(AD) Schema }
  ADSchema = class
    strict private
      //working with LDAPClient
      client : LDAPClient;     

      //Stores the state of connection
      isSchemaActive : boolean;

      //Client Info
      _HostName, _UserName, _Password : string;
      _PortNumber : integer;

      //Schema Catalog DN
      SchemaDN : string;
      currentUserDN : string;

      { Private function for establishing connection }
      function pvEstablishConnection() : ADSchemaStatus;

      { Private Function that tries to reconnect to server with current Client Info
         *returns the statues of connection }
      function pvTryConnect() : ADSchemaStatus;

      { Private Function that checks connection by sending simple query
         *if fails return false
         *if succeeds return true}
      function pvCheckConnection() : boolean;

      { The only function that can change SchemaDN value!
        *Returns true if success }
      function pvSetSchemaDN() : boolean;

      //working with LDAPClient - Clearing return values of Search
      procedure pvClearLDAPSearchResults(var searchResults : LDAPEntryArray);

      //search and get
      function pvGetEntries(dn : string;
                          filter : string;
                          withAttr : array of string;
                          var status : ADSchemaStatus) : ADEntryList;

      //Checks if entry has all needed attributes
      function pvCheckEntry(chEntry : ADEntry;
               var neededAttributes : TStringList) : boolean;
    public
      property isActive : boolean
        read isSchemaActive;

      { -----------------------------------------------------------------
        --------------------- Connection functions ---------------------- }

      //Constructor creates an object and connects to server: isActive = true
      constructor Create(hostName, userName, password: string; portNumber : integer;
                            var status : ADSchemaStatus); overload;

      //Just creating object: isActive = false. You need to use Connect procedure
      constructor Create();overload;

      //Destructor
      destructor Destroy(); override;

      //Connects to server: if success changes isActive to True
      procedure Connect(hostName, userName, password: string; portNumber : integer;
                          var status : ADSchemaStatus);

      { Disconnects from server
          *it also called from destructor if isActive=true }
      procedure Disconnect();
      

      { -----------------------------------------------------------------
        ---------------------- Data Handling Functions ------------------ }

      { Function returns ADEntry object with all attributes }
      function GetEntry(CNname : string;
                         entrType : EntryType;
                         var status : ADSchemaStatus) : ADEntry; overload;

      { Function returns ADEntry object with given attributes }
      function GetEntry(CNname : string;
                       entrType : EntryType;
                       withAttr : array of string;
                       var status : ADSchemaStatus) : ADEntry; overload;

      { Function returns List of ADEntry with ALL attributes }
      function GetAll(entrType : EntryType;
                       var status : ADSchemaStatus) : ADEntryList; overload;

      { Function returns List of ADEntry with GIVEN attributes }
      function GetAll(entrType : EntryType;
                      withAttr : array of string;
                      var status : ADSchemaStatus) : ADEntryList; overload;

      { Search and get function with LDAP filter }
      function GetEntries(filter : string;
                          withAttr : array of string;
                          var status : ADSchemaStatus) : ADEntryList;


      { Function adds new entry to schema
        * given ADEntry object is not freed in function }
      function AddEntry(newEntry : ADEntry) : ADSchemaStatus;

      { Function modifies Entry (only attributes that given)
        * given ADEntry object is not freed in function }
      function ModifyEntryAttributes(modifiedEntry : ADEntry) : ADSchemaStatus;

      { Function deletes all attributes in given ADEntryObject
        * given ADEntry object is not freed in function }
      function DeleteEntryAttributes(entryWithDeleteAttributes : ADEntry)
                                                      : ADSchemaStatus; overload;

      { Function deletes given attributes of entry with given name }
      function DeleteEntryAttributes(name : string;
                                     attrToDelete : array of string)
                                                      : ADSchemaStatus; overload;

      { Function for activating defunct class or attribute }
      function ActivateEntry(defunctEntryName : string) : ADSchemaStatus;

      { Function for deactivating active class or attribute }
      function DeactivateEntry(activeEntryName : string) : ADSchemaStatus;
  end;

implementation  

  { --------------------------------------------------------
    ------------------- IMPLEMENTATION ---------------------
    ------------------- ADSchema ---------------------------
    -------------------------------------------------------- }

  { Public }
  constructor ADSchema.Create(hostName, userName, password: string; portNumber : integer;
                              var status : ADSchemaStatus);
  begin
    client := LDAPClient.Create;
    Connect(hostName, userName, password, portNumber, status); 
  end;

  { Public }
  constructor ADSchema.Create();
  begin
    client := LDAPClient.Create;
    isSchemaActive := false;
  end;

  { Public }
  destructor ADSchema.Destroy(); 
  begin
    if isSchemaActive then
    begin
      Disconnect;
    end;
    if client <> nil then
    begin
      client.Free;
      client := nil;
    end;            

    inherited;
  end;

  { Public }
  procedure ADSchema.Connect(hostName, userName, password: string; portNumber : integer;
                              var status : ADSchemaStatus);
  begin
    {if status <> nil then
      status.free; }
      
    //check in values

    //set in values
    _HostName := hostName;
    _PortNumber := portNumber;
    _UserName := userName;
    _Password := password;

    //establishConnection function
    status := pvEstablishConnection();
    if status.StatusType <> SuccessStatus then
    begin
      if isSchemaActive then
        isSchemaActive := false;
      Exit;
    end;                  
    isSchemaActive := true;

    //Forming SchemaDN
    if not pvSetSchemaDN then
    begin
      status.Free;
      status := ADSchemaStatus.Create(1, ADSchemaError, 'SetSchemaDN error!');        
      isSchemaActive := false;
      Disconnect;
      Exit;
    end;   
    
  end;

  { Public }
  procedure ADSchema.Disconnect();
  begin
    //LDAPClient disconnect
    client.Disconnect;

    isSchemaActive := false;
  end;

  { ----------------------------------------------
    ------------- Private functions -------------- }
  { Private }
  function ADSchema.pvEstablishConnection() : ADSchemaStatus;
  var
    clientStatus : LDAPClientStatus;
  begin
    //LDAPCLient connect
    clientStatus := client.Init(_HostName, _PortNumber);
    if clientStatus.numb <> 0 then
    begin
      result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    clientStatus := client.ConnectSimple(_UserName, _Password);
    if clientStatus.numb <> 0 then
    begin
      result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    result := ADSchemaStatus.Create();
  end;

  { Private }
  function ADSchema.pvTryConnect() : ADSchemaStatus;
  begin
    //try to establishConnection
    result := pvEstablishConnection;
    //if connection is established
    if result.StatusType = SuccessStatus then
    begin
      //set isSchemaActive = true
      isSchemaActive := true;
      Exit;
    end;
    isSchemaActive := false;
  end;

  { Private }
  function ADSchema.pvCheckConnection() : boolean;
  var
    clientStatus : LDAPClientStatus;
    searchResult : LDAPEntryArray;
  begin
    //Check is Schema Active
    if isSchemaActive = false then
    begin
      result := isSchemaActive;
      Exit;
    end;
    
    //Simple query to check connection
    clientStatus := client.Search('CN=top,' + SchemaDN, '(objectClass=classSchema)', [], searchResult);
    pvClearLDAPSearchResults(searchResult);
    
    //if false then call Disconnect to clear memory
    if clientStatus.numb <> 0 then
    begin
      Disconnect;
    end;
    //return isSchemaActive
    result := isSchemaActive;
  end;

  { Private }
  function ADSchema.pvSetSchemaDN() : boolean;
  var
    dn : string;
    parsedDn : string;
  begin
    dn := GetUserNameExString(NameFullyQualifiedDN);

    currentUserDN := dn;

    //parse the dn
    if pos('DC=', dn) = 0 then
    begin
      result := false;
      Exit;
    end;
    parsedDn := copy(dn, pos('DC=', dn));
    Insert('CN=Schema,CN=Configuration,', parsedDn, 0);

    SchemaDN := parsedDn;
    result := true;
  end;

  { -----------------------------------------------------------------
    ---------------------- Data Handling Functions ------------------ }

  { Public }  
  { Function returns ADEntry object with all attributes }
  function ADSchema.GetEntry(CNname : string;
                    entrType : EntryType;
                     var status : ADSchemaStatus) : ADEntry;
  begin

    result := GetEntry(CNname, entrType, [], status);
  end;

  { Public }
  { Function returns ADEntry object with given attributes }
  function ADSchema.GetEntry(CNname : string;
                       entrType : EntryType;
                       withAttr : array of string;
                       var status : ADSchemaStatus) : ADEntry;
  var
    entryDN, filter : string;
    resTemp : ADEntryList;
  begin

      
    //forming entry dn
    entryDN := 'CN=' + CNname + ',' + SchemaDN;

    //forming filter
    case entrType of
      ClassEntry: filter := '(objectClass=classSchema)';
      AttributeEntry: filter := '(objectClass=attributeSchema)';
    end;

    resTemp := pvGetEntries(entryDN, filter, withAttr, status);

    //Check item count
    if resTemp.EntriesCount <> 1 then
    begin
      status.free;
      status := ADSchemaStatus.Create(2, ADSchemaError, 'Wrong number of entries');
      result := nil;
      resTemp.Destroy;
      Exit;
    end;

    result := resTemp.Items[0];
  end;

  { Public }
  { Function returns List of ADEntry with ALL attributes }
  function ADSchema.GetAll(entrType : EntryType;
                       var status : ADSchemaStatus) : ADEntryList;
  begin

      
    result := GetAll(entrType, [], status);
  end;

  { Public }
  { Function returns List of ADEntry with GIVEN attributes }
  function ADSchema.GetAll(entrType : EntryType;
                      withAttr : array of string;
                      var status : ADSchemaStatus) : ADEntryList;
  var
    entryDN, filter : string; 
  begin


    //forming entry dn
    entryDN := SchemaDN;

    //forming filter
    case entrType of
      ClassEntry: filter := '(objectClass=classSchema)';
      AttributeEntry: filter := '(objectClass=attributeSchema)';
    end;

    result := pvGetEntries(entryDN, filter, withAttr, status); 
  end;

  { Public }
  { Search and get function with LDAP filter }
  function ADSchema.GetEntries(filter : string;
                      withAttr : array of string;
                         var status : ADSchemaStatus) : ADEntryList;
  var
    entryDN : string;
  begin


    entryDN := SchemaDN;
    result := pvGetEntries(entryDN, filter, withAttr, status);   
  end;

  { Public }
  { Function adds new entry to schema }
  function ADSchema.AddEntry(newEntry : ADEntry) : ADSchemaStatus;
  var
    neededAttributes : TStringList;
    clientStatus : LDAPClientStatus;
    entryDN : string;
    attributes : array of LDAPAttribute;
    attr : LDAPAttribute;
    iAttribute, iValue : integer;
  begin     

    //Check connection
    //if connection lost exit
    if pvCheckConnection = false then
    begin
      result := pvTryConnect;
      if result.StatusType <> SuccessStatus then
      begin
        Exit;
      end;
      result.Free;
      result := nil;
    end;

    //check given entry attributes
    if pvCheckEntry(newEntry, neededAttributes) = false then
    begin
      //if there is no all "must" attributes,
      //exit with message of needed attributes
      Result := ADSchemaStatus.Create(3, ADSchemaError, neededAttributes.CommaText);
      neededAttributes.Free;
      neededAttributes := nil;
      Exit;
    end;

    //form data for calling the LDAPClient function
    entryDN := 'cn=' + newEntry.Name + ',' + SchemaDN;

    SetLength(attributes, newEntry.AttributesCount);
    for iAttribute := 0 to Length(attributes) - 1 do
    begin
      attr := LDAPAttribute.Create(newEntry.Attributes[iAttribute].ValuesCount);
      attr.Name := newEntry.Attributes[iAttribute].Name;
      for iValue := 0 to attr.ValueCount - 1 do
      begin
        attr.Value[iValue] := newEntry.Attributes[iAttribute].Values[iValue];
      end;
      attributes[iAttribute] := attr;
    end;  

    //call LDAPClient AddEntry function
    clientStatus := client.AddEntry(entryDN, attributes);

    //check status
    if clientStatus.numb <> 0 then
    begin
      //if fail, form ADSchemaStatus with LDAPError
      Result :=ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    //if success, form ADSchemaStatus with SuccessStatus
    result := ADSchemaStatus.Create;
  end;

  { Public }
  { Function modifies Entry (only attributes that given) }
  function ADSchema.ModifyEntryAttributes(modifiedEntry : ADEntry) : ADSchemaStatus;
  var 
    clientStatus : LDAPClientStatus;
    entryDN : string;
    attributes : array of LDAPAttribute;
    attr : LDAPAttribute;
    iAttribute, iValue : integer;
  begin
    //Check connection
    //if connection lost exit
    if pvCheckConnection = false then
    begin
      result := pvTryConnect;
      if result.StatusType <> SuccessStatus then
      begin
        Exit;
      end;
      result.Free;
      result := nil;
    end;
    
    //form data for calling the LDAPClient function
    entryDN := 'CN=' + modifiedEntry.Name + ',' + SchemaDN;

    SetLength(attributes, modifiedEntry.AttributesCount);
    for iAttribute := 0 to Length(attributes) - 1 do
    begin
      attr := LDAPAttribute.Create(modifiedEntry.Attributes[iAttribute].ValuesCount);
      attr.Name := modifiedEntry.Attributes[iAttribute].Name;
      for iValue := 0 to attr.ValueCount - 1 do
      begin
        attr.Value[iValue] := modifiedEntry.Attributes[iAttribute].Values[iValue];
      end;
      attributes[iAttribute] := attr;
    end;  

    //call LDAPClient ModfiyEntry function
    clientStatus := client.ModifyEntry(entryDN, attributes, MODIFY_TYPE_REPLACE);

    //check status
    if clientStatus.numb <> 0 then
    begin
      //if fail, form ADSchemaStatus with LDAPError
      Result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    //if success, form ADSchemaStatus with SuccessStatus
    result := ADSchemaStatus.Create;
  end;

  { Public }
  { Function deletes all attributes in given ADEntryObject }
  function ADSchema.DeleteEntryAttributes(entryWithDeleteAttributes : ADEntry)
                                                      : ADSchemaStatus;
  var 
    clientStatus : LDAPClientStatus;
    entryDN : string;
    attributes : array of LDAPAttribute;
    attr : LDAPAttribute;
    iAttribute, iValue : integer;
  begin
    //Check connection
    //if connection lost exit
    if pvCheckConnection = false then
    begin
      result := pvTryConnect;
      if result.StatusType <> SuccessStatus then
      begin
        Exit;
      end;
      result.Free;
      result := nil;
    end;
    
    //form data for calling the LDAPClient function
    entryDN := 'CN=' + entryWithDeleteAttributes.Name + ',' + SchemaDN;

    SetLength(attributes, entryWithDeleteAttributes.AttributesCount);
    for iAttribute := 0 to Length(attributes) - 1 do
    begin
      attr := LDAPAttribute.Create(entryWithDeleteAttributes.Attributes[iAttribute].ValuesCount);
      attr.Name := entryWithDeleteAttributes.Attributes[iAttribute].Name;
      for iValue := 0 to attr.ValueCount - 1 do
      begin
        attr.Value[iValue] := entryWithDeleteAttributes.Attributes[iAttribute].Values[iValue];
      end;
      attributes[iAttribute] := attr;
    end;  

    //call LDAPClient Modify function
    clientStatus := client.ModifyEntry(entryDN, attributes, MODIFY_TYPE_DELETE);

    //check status
    if clientStatus.numb <> 0 then
    begin
      //if fail, form ADSchemaStatus with LDAPError
      Result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    //if success, form ADSchemaStatus with SuccessStatus
    result := ADSchemaStatus.Create;            
  end;

  { Public }
  { Function deletes given attributes of entry with given name }
  function ADSchema.DeleteEntryAttributes(name : string;
                                     attrToDelete : array of string)
                                                      : ADSchemaStatus;
  var
    clientStatus : LDAPClientStatus;
    entryDN : string;
    attributes : array of LDAPAttribute;
    attr : LDAPAttribute;
    iAttribute : integer;
  begin
    //Check connection
    //if connection lost exit
    if pvCheckConnection = false then
    begin
      result := pvTryConnect;
      if result.StatusType <> SuccessStatus then
      begin
        Exit;
      end;
      result.Free;
      result := nil;
    end;
    
    //form data for calling the LDAPClient function
    entryDN := 'CN=' + name + ',' + SchemaDN;

    SetLength(attributes, Length(attrToDelete));
    for iAttribute := 0 to Length(attributes) - 1 do
    begin
      attr := LDAPAttribute.Create(0);
      attr.Name := attrToDelete[iAttribute];        
      attributes[iAttribute] := attr;
    end;  

    //call LDAPClient MofifyEntry function
    clientStatus := client.ModifyEntry(entryDN, attributes, MODIFY_TYPE_DELETE);

    //check status
    if clientStatus.numb <> 0 then
    begin
      //if fail, form ADSchemaStatus with LDAPError
      Result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    //if success, form ADSchemaStatus with SuccessStatus
    result := ADSchemaStatus.Create;
  end;

  { Public }
  { Function for activating defunct class or attribute }
  function ADSchema.ActivateEntry(defunctEntryName : string) : ADSchemaStatus;
  var
    defunctEntry : ADEntry;
  begin
    defunctEntry := ADEntry.Create(defunctEntryName);
    defunctEntry.AddAttribute('isDefunct', ['TRUE']);
    Result := ModifyEntryAttributes(defunctEntry);
  end;

  { Public }
  { Function for deactivating active class or attribute }
  function ADSchema.DeactivateEntry(activeEntryName : string) : ADSchemaStatus;
  var
    activeEntry : ADEntry;
  begin
    activeEntry := ADEntry.Create(activeEntryName);
    activeEntry.AddAttribute('isDefunct', ['TRUE']);
    Result := ModifyEntryAttributes(activeEntry);
  end;

  { Private }
  procedure ADSchema.pvClearLDAPSearchResults(var searchResults : LDAPEntryArray);
  var
    iEntry : integer;
    iAttribute : integer;
  begin
    for iEntry := 0 to Length(searchResults) - 1 do
    begin
      for iAttribute := 0 to searchResults[iEntry].attributes.Count - 1 do
      begin
        LDAPAttribute(searchResults[iEntry].attributes).Free;
        LDAPAttribute(searchResults[iEntry].attributes) := nil;
      end;
      searchResults[iEntry].attributes.Free;
      searchResults[iEntry].attributes := nil;         
    end;
  end;

  { Private }
  //search and get
  function ADSchema.pvGetEntries(dn : string;
                          filter : string;
                          withAttr : array of string;
                          var status : ADSchemaStatus) : ADEntryList;
  var
    entryDN, searchFilter : string;
    attrs : array of LDAPAttribute;
    attr : LDAPAttribute;
    iAttribute, iValue, iEntry : integer;
    searchResults : LDAPEntryArray;
    ldapStatus : LDAPClientStatus;
    attributeIndex, entryIndex : integer;
    parsedName : string;
  begin
    //Check Connection
    if pvCheckConnection = false then
    begin
      status := pvTryConnect;
      if status.StatusType <> SuccessStatus then
      begin
        result := nil;
        Exit;
      end;
      if status <> nil then
      begin
        status.Free;
        status := nil;
      end;            
    end;


    //forming entry dn
    entryDN := dn;

    //forming filter
    searchFilter := filter;

    //forming attributes array
    SetLength(attrs, Length(withAttr));
    for iAttribute := 0 to Length(withAttr) - 1 do
    begin
      attr := LDAPAttribute.Create(0);
      attr.Name := withAttr[iAttribute];
      attrs[iAttribute] := attr;
    end;

    //Call LDAPClient function
    ldapStatus := client.Search(entryDN, searchFilter, attrs, searchResults);
    if ldapStatus.numb <> 0 then
    begin 
      status := ADSchemaStatus.Create(ldapStatus.numb, LDAPError, ldapStatus.msg);
      result := nil;
      Exit;
    end;

    //parse Search Results and form return object
    result := ADEntryList.Create;
    for iEntry := 0 to Length(searchResults) - 1 do
    begin
      parsedName := searchResults[iEntry].dn;
      //delete 'CN='
      Delete(parsedName,0,3);
      //copy
      parsedName := copy(parsedName, 0, pos(',CN=', parsedName));

      //create new entry
      entryIndex := Result.AddEntry(parsedName);
      for iAttribute := 0 to searchResults[iEntry].attributes.Count - 1 do
      begin
        attr := LDAPAttribute(searchResults[iEntry].attributes[iAttribute]);

        attributeIndex := result.Items[entryIndex].AddAttribute(attr.Name);
        for iValue := 0 to attr.ValueCount - 1 do
          result.Items[entryIndex].Attributes[attributeIndex].AddValue(attr.Value[iValue]);
      end;
    end;

    //Clearing return values of client.Search
    pvClearLDAPSearchResults(searchResults);

    status := ADSchemaStatus.Create;
  end;

  { Private }
  //Checks if entry has all needed attributes
  function ADSchema.pvCheckEntry(chEntry : ADEntry;
                        var neededAttributes : TStringList) : boolean;
  type
    objectType = (notDefined, attributeType, classType);
  var
    iAttribute, iValue, i : integer;
    objectClasses : array of string;
    oType : objectType;
    isCnExist,
     isObjectClassesExist,
      isGovernsIDExist,
       isAttributeIDExist,
        isAttributeSyntaxExist,
         isOMSyntaxExist : boolean;
  begin
    //Check if 'cn' attribute is set
    //Check if 'objectClass' attriubute is set
    isCnExist := false;
    isObjectClassesExist := false;
    isGovernsIDExist := false;
    isAttributeIDExist := false;
    isAttributeSyntaxExist := false;
    isOMSyntaxExist := false;
    for iAttribute := 0 to chEntry.AttributesCount - 1 do
    begin
      if not isObjectClassesExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'objectClass' then
          begin
            SetLength(objectClasses, chEntry.Attributes[iAttribute].ValuesCount);
            for iValue := 0 to Length(objectClasses) - 1 do
            begin
              objectClasses[iValue] := chEntry.Attributes[iAttribute].Values[iValue];
            end;
            isObjectClassesExist := true;
          end;
      end;

      if not isCnExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'cn' then
          isCnExist := true;
      end;

      if not isGovernsIDExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'governsID' then
          isGovernsIDExist := true;
      end;

      if not isAttributeIDExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'attributeID' then
          isAttributeIDExist := true;
      end;

      if not isAttributeSyntaxExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'attributeSyntax' then
          isAttributeSyntaxExist := true;
      end;

      if not isOMSyntaxExist then
      begin
        if chEntry.Attributes[iAttribute].Name = 'oMSyntax' then
          isOMSyntaxExist := true;
      end;
    end;

    if not isCnExist then
    begin
      neededAttributes := TStringList.Create;
      neededAttributes.Add('cn');
      result := false;
      Exit;
    end;

    if not isObjectClassesExist then
    begin
      neededAttributes := TStringList.Create;
      neededAttributes.Add('objectClass');
      result := false;
      Exit;
    end;

    { write check of must attributes }
    //Check existence of 'must' attributes
    for  i := 0 to Length(objectClasses) - 1 do
    begin
      if objectClasses[i] = 'classSchema' then
      begin
        oType := classType;
        Break;
      end;
      if objectClasses[i] = 'attributeSchema' then
      begin
        oType := attributeType;
        Break;
      end;               
    end;

    if oType = notDefined then
    begin
      neededAttributes := TStringList.Create;
      neededAttributes.Add('classSchema');
      neededAttributes.Add('attributeSchema');
      result := false;
      Exit;
    end;

    if oType = attributeType then
    begin
      { Check existence:
        *attributeID
        *attributeSyntax
        *oMSyntax }
        if not isAttributeIDExist or not isAttributeSyntaxExist or not isOMSyntaxExist then
        begin
          neededAttributes := TStringList.Create;
          neededAttributes.Add('attributeID');
          neededAttributes.Add('attributeSyntax');
          neededAttributes.Add('oMSyntax');
          result := false;
          Exit;
        end;
    end;

    if oType = classType then
    begin
      { Check existence:   
        *governsID }
      if not isGovernsIDExist then
      begin
        neededAttributes := TStringList.Create;
        neededAttributes.Add('governsID');
        result := false;
        Exit;
      end;
    end;

    result := true;
  end;

end.
