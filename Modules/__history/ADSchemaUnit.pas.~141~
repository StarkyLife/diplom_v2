{ This unit contains class for Active Directory Schema Manipulation.

  Author: Ismagilov Ilshat (student group 4410)
  Email: ilshat.ismagilov2014@gmail.com
  Organisation: KAI (kai.ru)

  Version: 2.0
}

unit ADSchemaUnit;

interface

uses Windows, Classes, SysUtils, LDAPClientUnit;

type

  { Public class for administrating the Active Directory(AD) Schema }
  ADSchema = class
    private
      client : LDAPClient;
    public

  end;

implementation

  { --------------------------------------------------------
    ------------------- IMPLEMENTATION ---------------------
    ------------------- ADAttribute ------------------------
    -------------------------------------------------------- }
  constructor ADAttribute.Create(attrName : string; attrValues : array of string);
  var
    i : integer;
  begin
    AttributeName := attrName;
    AttributeValues := TStringList.Create;
    for i := 0 to Length(attrValues) - 1 do
      AttributeValues.Add(attrValues[i]);
  end;

  constructor ADAttribute.Create(attrName : string);
  begin
    AttributeName := attrName;
    AttributeValues := TStringList.Create;
  end;

  destructor ADAttribute.Destroy();
  begin
    if AttributeValues <> nil then
      AttributeValues.Free;

    inherited;
  end;

  function ADAttribute.GetList() : TStringList;
  begin
    result := AttributeValues;
  end;

  procedure ADAttribute.AddValue(value : string);
  begin
    AttributeValues.Add(value);
  end;

  procedure ADAttribute.DeleteValue(valueIndex : integer);
  begin
    AttributeValues.Delete(valueIndex);
  end;

  function ADAttribute.GetValuesCount() : integer;
  begin
    result := AttributeValues.Count;
  end;

  function ADAttribute.GetValue(index : integer) : string;
  begin
    result := AttributeValues[index];
  end;

  procedure ADAttribute.SetValue(index : integer; value : string);
  begin
    AttributeValues[index] := value;
  end;

  { --------------------------------------------------------
    ------------------- IMPLEMENTATION ---------------------
    ------------------- ADEntry ----------------------------
    -------------------------------------------------------- }
  constructor ADEntry.Create(entrName : string);
  begin
    EntryName := entryName;
    EntryAttributes := TList.Create;
  end;

  constructor ADEntry.Create(entrName : string; attrs : array of ADAttribute);
  var
    i : integer;
  begin
    EntryName := entryName;
    EntryAttributes := TList.Create;
    for i := 0 to Length(attrs) - 1 do
      EntryAttributes.Add(attrs[i]);
  end;

  destructor ADEntry.Destroy();
  var
    i : integer;
  begin
    if (EntryAttributes <> nil) then
    begin
      if EntryAttributes.Count > 0 then
      begin
        for i := 0 to EntryAttributes.Count - 1 do
          ADAttribute(EntryAttributes[i]).Destroy;
        EntryAttributes.Clear;  
      end;
      EntryAttributes.Free;
    end;

    inherited;
  end;

  function ADEntry.GetList() : TList;
  begin
    result := EntryAttributes;
  end;

  procedure ADEntry.AddAttribute(attribute : ADAttribute);
  var
    i : integer;
    attrs : array of string;
  begin
    SetLength(attrs, attribute.ValuesCount);
    for i := 0 to Length(attrs) - 1 do
      attrs[i] := attribute.Values[i];
      
    EntryAttributes.Add(ADAttribute.Create(attribute.Name, attrs));
  end;

  procedure ADEntry.AddAttribute(attrName : string; attrValues : array of string);
  begin
    EntryAttributes.Add(ADAttribute.Create(attrName, attrValues));
  end;

  procedure ADEntry.AddAttribute(attrName : string);
  begin
    EntryAttributes.Add(ADAttribute.Create(attrName));
  end;

  procedure ADEntry.DeleteAttribute(index : integer);
  begin
    ADAttribute(EntryAttributes[index]).Destroy;
    EntryAttributes.Delete(index);
  end;

  procedure ADEntry.DeleteAttribute(name : string);
  var
    i : integer;
  begin
    for i := 0 to EntryAttributes.Count - 1 do
    begin
      if ADAttribute(EntryAttributes[i]).Name = name then
      begin
        ADAttribute(EntryAttributes[i]).Destroy;
        EntryAttributes.Delete(i);
      end;
    end;
  end;

  function ADEntry.GetAttributesCount() : integer;
  begin
    result := EntryAttributes.Count;
  end;

  function ADEntry.GetAttribute(index : integer) : ADAttribute;
  begin
    result := ADAttribute(EntryAttributes[index]);
  end;   

end.
