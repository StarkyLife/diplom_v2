{ This unit contains class for Active Directory Schema Manipulation.

  Author: Ismagilov Ilshat (student group 4410)
  Email: ilshat.ismagilov2014@gmail.com
  Organisation: KAI (kai.ru)

  Version: 2.0
}

unit ADSchemaUnit;

interface

uses Windows, Classes, SysUtils, ADSchemaTypes, ADSchemaHelpUnit, LDAPClientUnit;

type
  EntryType = (
    ClassEntry,
    AttributeEntry);

  { Public class for administrating the Active Directory(AD) Schema }
  ADSchema = class
    strict private
      client : LDAPClient;

      //Stores the state of connection
      isSchemaActive : boolean;

      //Client Info
      _HostName, _UserName, _Password : string;
      _PortNumber : integer;

      //Schema Catalog DN
      SchemaDN : string;
      currentUserDN : string;

      { Private function for establishing connection }
      function pvEstablishConnection() : ADSchemaStatus;

      { Private Function that tries to reconnect to server with current Client Info
         *returns the statues of connection }
      function pvTryConnect() : ADSchemaStatus;

      { Private Function that checks connection by sending simple query
         *if fails return false
         *if succeeds return true}
      function pvCheckConnection() : boolean;

      { The only function that can change SchemaDN value!
        *Returns true if success }
      function pvSetSchemaDN() : boolean;
    public
      property isActive : boolean
        read isSchemaActive;

      { -----------------------------------------------------------------
        --------------------- Connection functions ---------------------- }

      //Constructor creates an object and connects to server: isActive = true
      constructor Create(hostName, userName, password: string; portNumber : integer;
                            var status : ADSchemaStatus); overload;

      //Just creating object: isActive = false. You need to use Connect procedure
      constructor Create();overload;

      //Destructor
      destructor Destroy(); override;

      //Connects to server: if success changes isActive to True
      procedure Connect(hostName, userName, password: string; portNumber : integer;
                          var status : ADSchemaStatus);

      { Disconnects from server
          *it also called from destructor if isActive=true }
      procedure Disconnect();
      

      { -----------------------------------------------------------------
        ---------------------- Data Handling Functions ------------------ }

      { Function returns ADEntry object with all attributes }
      function GetEntry(CNname : string;
                         entrType : EntryType;
                         var status : ADSchemaStatus) : ADEntry; overload;

      { Function returns ADEntry object with given attributes }
      function GetEntry(CNname : string;
                       entrType : EntryType;
                       withAttr : array of string;
                       var status : ADSchemaStatus) : ADEntry; overload;

      { Function returns List of ADEntry with ALL attributes }
      function GetAll(entrType : EntryType;
                       var status : ADSchemaStatus) : ADEntryList; overload;

      { Function returns List of ADEntry with GIVEN attributes }
      function GetAll(entrType : EntryType;
                      withAttr : array of string;
                      var status : ADSchemaStatus) : ADEntryList; overload;


      { Function adds new entry to schema }
      function AddEntry(entry : ADEntry) : ADSchemaStatus;

      { Function modifies Entry (only attributes that given) }
      function ModifyEntryAttributes(modifiedEntry : ADEntry) : ADSchemaStatus;

      { Function deletes all attributes in given ADEntryObject }
      function DeleteEntryAttributes(entryWithDeleteAttributes : ADEntry)
                                                      : ADSchemaStatus; overload;

      { Function deletes given attributes of entry with given name }
      function DeleteEntryAttributes(name : string;
                                     attrToDelete : array of string)
                                                      : ADSchemaStatus; overload;

  end;

implementation  

  { --------------------------------------------------------
    ------------------- IMPLEMENTATION ---------------------
    ------------------- ADSchema ---------------------------
    -------------------------------------------------------- }

  { Public }
  constructor ADSchema.Create(hostName, userName, password: string; portNumber : integer;
                              var status : ADSchemaStatus);
  begin
    client := LDAPClient.Create;
    Connect(hostName, userName, password, portNumber, status); 
  end;

  { Public }
  constructor ADSchema.Create();
  begin
    client := LDAPClient.Create;
    isSchemaActive := false;
  end;

  { Public }
  destructor ADSchema.Destroy(); 
  begin
    if isSchemaActive then
    begin
      Disconnect;
    end;
    if client <> nil then
      client.Free;

    inherited;
  end;

  { Public }
  procedure ADSchema.Connect(hostName, userName, password: string; portNumber : integer;
                              var status : ADSchemaStatus);
  begin
    if status <> nil then
      status.free;
      
    //check in values

    //set in values
    _HostName := hostName;
    _PortNumber := portNumber;
    _UserName := userName;
    _Password := password;

    //establishConnection function
    status := pvEstablishConnection();
    if status.StatusType <> SuccessStatus then
    begin
      if isSchemaActive then
        isSchemaActive := false;
      Exit;
    end;                  
    isSchemaActive := true;

    //Forming SchemaDN
    if pvSetSchemaDN then
    begin
      status.Free;
      status.Create(1, ADSchemaError, 'SetSchemaDN error!');        
      isSchemaActive := false;
      Disconnect;
      Exit;
    end;   
    
  end;

  { Public }
  procedure ADSchema.Disconnect();
  begin
    //LDAPClient disconnect
    client.Disconnect;

    isSchemaActive := false;
  end;

  { ----------------------------------------------
    ------------- Private functions -------------- }
  { Private }
  function ADSchema.pvEstablishConnection() : ADSchemaStatus;
  var
    clientStatus : LDAPClientStatus;
  begin
    //LDAPCLient connect
    clientStatus := client.Init(_HostName, _PortNumber);
    if clientStatus.numb <> 0 then
    begin
      result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    clientStatus := client.ConnectSimple(_UserName, _Password);
    if clientStatus.numb <> 0 then
    begin
      result := ADSchemaStatus.Create(clientStatus.numb, LDAPError, clientStatus.msg);
      Exit;
    end;

    result := ADSchemaStatus.Create();
  end;

  { Private }
  function ADSchema.pvTryConnect() : ADSchemaStatus;
  begin
    //try to establishConnection
    result := pvEstablishConnection;
    //if connection is established
    if result.StatusType = SuccessStatus then
    begin
      //set isSchemaActive = true
      isSchemaActive := true;
    end;

  end;

  { Private }
  function ADSchema.pvCheckConnection() : boolean;
  var
    clientStatus : LDAPClientStatus;
    searchResult : ArrayOfLDAPAttributeList;
  begin
    //Simple query to check connection
    clientStatus := client.Search(currentUserDN, '(objectClass=user)', [], searchResult);

    //if false then call Disconnect to clear memory
    if clientStatus.numb <> 0 then
    begin
      Disconnect;
    end;
    //return isSchemaActive
    result := isSchemaActive;
  end;

  { Private }
  function ADSchema.pvSetSchemaDN() : boolean;
  var
    dn : string;
    parsedDn : string;
  begin
    dn := GetUserNameExString(NameFullyQualifiedDN);

    currentUserDN := dn;

    //parse the dn
    if pos('DC=', dn) = 0 then
    begin
      result := false;
      Exit;
    end;
    parsedDn := copy(dn, pos('DC=', dn));
    Insert('CN=Schema,CN=Configuration,', parsedDn, 0);

    SchemaDN := parsedDn;
    result := true;
  end;

  { -----------------------------------------------------------------
    ---------------------- Data Handling Functions ------------------ }

  { Function returns ADEntry object with all attributes }
  function ADSchema.GetEntry(CNname : string;
                    entrType : EntryType;
                     var status : ADSchemaStatus) : ADEntry;
  begin
    result := GetEntry(CNname, entrType, [], status);
  end;

  { Function returns ADEntry object with given attributes }
  function ADSchema.GetEntry(CNname : string;
                       entrType : EntryType;
                       withAttr : array of string;
                       var status : ADSchemaStatus) : ADEntry;
  begin

  end;

end.
